# Pre-Facet Target Calibration Pipeline
#
# Target part of the basic Pre-Facet calibration pipeline:
# - no demixing but A-team flagging,
# - calibration transfer and averaging of target data in one go.
# - checks frequncies in MSs to group files
# - the new "error_tolerance" option requires LOFAR software version >= 2.15
#   (Comment out all lines with "error_tolerance" if you want to use an older version.)
# - using LoSoTo from the pipeline requires latest executable_args node-script
#   (available in the current LOFAR trunk, revision 33969 and later)
#   (The diff, to do the patching by hand, can be found in the 6th comment at:
#   https://github.com/lofar-astron/prefactor/issues/4  )
# - expects shared filesystem, that all nodes can reach all files!
#   (E.g. a single workstation or compute cluster with shared filesystem
#   doesn't work on multiple nodes on CEP-2 or CEP3.)

### parameters you will need to adjust.
# parameters you will need to adjust.
# averaging for the target data
! avg_timestep         = 4   # averaging step needed to average the data to 4 seconds time resolution
! avg_freqstep         = 8   # averaging step needed to average the data to 4 ch/SB frequency resolution
# where to find the target data
! target_input_path    = TRUE_HOME/target_data_in/
! cal_input_pattern    = *MS
! target_input_pattern = L*.MS
# path to the skymodel for the phase-only calibration of the target
! target_skymodel      = /usr/lib/prefactor/skymodels/tgss_skymodel.txt
# download the phase-only calibration skymodel from TGSS
# "Force" : always download , "True" download if {{ target_skymodel }} does not exist , "False" : never download
! use_tgss_target      = Force 
# where to put the inspection plots generated by the pipeline
! inspection_directory = TRUE_HOME/target_inspection/
# where the files with the calibration values from the calibrator pipeline are
! cal_values_directory = TRUE_HOME/cal_values/
# where to put the resulting measurement sets generated by the pipeline
! results_directory    = TRUE_HOME/target_data_out/

# NDPPP-compatible pattern for baselines or stations to be flagged
! flag_baselines         = [  CS013HBA*  ]
# minimum fraction of unflagged data after RFI flagging and A-team clipping
! min_unflagged_fraction = 0.5
# name of the station that will be used as a reference for the phase-plots
! reference_station      = CS001HBA0

### Values needed for RMextract
# the URL of the server where  the IONEX files can be downloaded
# leave it at "None" to disable downloads, or set it to:
#   ftp://ftp.unibe.ch/aiub/CODE/
# to download from the "standard" server
! ionex_server  = ftp://ftp.aiub.unibe.ch/CODE/
# the prefix of the IONEX files
! ionex_prefix  = CODG
# path where the IONEX files can be stored or are already stored
! ionex_path    = TRUE_HOME/ionex/

# pathes to the scripts etc.
# #### ToDo: get the scripts onto CEP3 and adjust the pathes here!
! ATeam_skymodel           = /usr/share/prefactor/skymodels/Ateam_LBA_CC.skymodel
! losoto_importer          = /usr/lib/prefactor/scripts/losotoImporter.py
! get_ion_script           = /usr/bin/download_IONEX.py 
! transfer_script          = /usr/lib/prefactor/scripts/transfer_gains_RMextract.py
! ATeam_Clipper            = /usr/lib/prefactor/scripts/Ateamclipper.py
! get_tgss_skymodel_script = /usr/lib/prefactor/scripts/download_tgss_skymodel_target.py
! sortmap_script           = /usr/lib/prefactor/scripts/sort_times_into_freqGroups.py
! check_flagged_script     = /usr/lib/prefactor/scripts/check_unflagged_fraction.py
! structurefunction_script = /usr/lib/prefactor/scripts/getStructure_from_phases.py
! plotphases_script        = /usr/lib/prefactor/scripts/plot_solutions_all_stations.py
! losoto_executable        = /usr/bin/losoto
! makesourcedb             = /usr/bin/makesourcedb 
! flagging_strategy        = /usr/share/rfistrategies/HBAdefault


# number of processes to use per step per node
! num_proc_per_node        = 8 
# number of processes to use per step per node for tasks with high i/o (dppp or cp) or memory (eg calibration)
! num_proc_per_node_limit  = 4
# number of threads per process for NDPPP
! max_dppp_threads         = 2

# set this to True if you want the pipeline run to continue if single bands fail
! error_tolerance           =  False

### Stuff that you probably don't need to modify
# which steps to run 
pipeline.steps=[mk_inspect_dir, createmap_target, combine_data_target_map, get_ion_files, trans, parmmap, ndppp_prep_target, create_ateam_model_map, make_sourcedb_ateam, expand_sourcedb_ateam, predict_ateam, ateamcliptar, mk_results_dir, make_results_mapfile, move_results] #h5imp_gsmsol, plot_gsm_phases, gsmcal_antmap, make_structurefunction, old_plot_gsmphases, createmap_plots, copy_plots, mk_results_dir, make_results_mapfile, move_results]

# create the inspection_directory if needed
mk_inspect_dir.control.kind               =  plugin
mk_inspect_dir.control.type               =  makeDirectory
mk_inspect_dir.control.directory          =  {{ inspection_directory }}

# generate a mapfile of all the target data
createmap_target.control.kind            =   plugin
createmap_target.control.type            =   createMapfile
createmap_target.control.method          =   mapfile_from_folder
createmap_target.control.mapfile_dir     =   input.output.mapfile_dir
createmap_target.control.filename        =   createmap_target.mapfile
createmap_target.control.folder          =   {{ target_input_path }}
createmap_target.control.pattern         =   {{ target_input_pattern }}

# combine all entries into one mapfile, for the sortmap script
combine_data_target_map.control.kind            =   plugin
combine_data_target_map.control.type            =   createMapfile
combine_data_target_map.control.method          =   mapfile_all_to_one
combine_data_target_map.control.mapfile_dir     =   input.output.mapfile_dir
combine_data_target_map.control.filename        =   combine_data_tar_map.mapfile
combine_data_target_map.control.mapfile_in      =   createmap_target.output.mapfile

# get ionex files once for every day that is covered by one of the input MSs
get_ion_files.control.type            = pythonplugin
get_ion_files.control.executable      = {{ get_ion_script }}
get_ion_files.control.max_per_node    =  1
get_ion_files.control.error_tolerance = {{ error_tolerance }}
get_ion_files.argument.flags          = [combine_data_target_map.output.mapfile]
get_ion_files.argument.ionex_server   = {{ ionex_server }}
get_ion_files.argument.ionex_prefix   = {{ ionex_prefix }}
get_ion_files.argument.ionexPath      = {{ ionex_path }}

# generate parmDB with the interpolated calibrator data to apply to the traget
trans.control.type              =  pythonplugin
trans.control.executable        =  {{ transfer_script }}
trans.control.max_per_node      =  {{ num_proc_per_node }}
trans.control.error_tolerance   =  {{ error_tolerance }}
trans.argument.flags            =  [createmap_target.output.mapfile]
trans.argument.store_basename   =  caldata_transfer
trans.argument.store_directory  =  {{ cal_values_directory }}
trans.argument.newparmdbext     =  /instrument_amp_clock_offset
trans.argument.ionex_server     =  {{ ionex_server }}
trans.argument.ionex_prefix     =  {{ ionex_prefix }}
trans.argument.ionexPath        =  {{ ionex_path }}

# generate mapfile with the parmDBs to be applied to the target data
parmmap.control.kind               =  plugin
parmmap.control.type               =  createMapfile
parmmap.control.method             =  add_suffix_to_file
parmmap.control.mapfile_in         =  createmap_target.output.mapfile
parmmap.control.add_suffix_to_file =  /instrument_amp_clock_offset
parmmap.control.mapfile_dir        =  input.output.mapfile_dir
parmmap.control.filename           =  targetparmdb.mapfile

# run NDPPP on the target data to flag, transfer calibrator values, and average
ndppp_prep_target.control.type                      = dppp
ndppp_prep_target.control.max_per_node              = {{ num_proc_per_node_limit }}
ndppp_prep_target.control.error_tolerance           = {{ error_tolerance }}
ndppp_prep_target.control.mapfiles_in               = [createmap_target.output.mapfile, parmmap.output.mapfile]
ndppp_prep_target.control.inputkeys                 = [input_file, parmdb_file]
ndppp_prep_target.argument.numthreads               = {{ max_dppp_threads }}
ndppp_prep_target.argument.msin                     = input_file
ndppp_prep_target.argument.msin.datacolumn          = DATA
ndppp_prep_target.argument.msin.baseline            = CS*&; RS*&; CS*&RS*
ndppp_prep_target.argument.msout.datacolumn         = DATA
ndppp_prep_target.argument.msout.writefullresflag   = False
ndppp_prep_target.argument.msout.overwrite          = True
ndppp_prep_target.argument.steps                    = [flag1,filter,flagamp,applyclock,applygain,applybeam,applyrotate,count,flag2,count,avg]
ndppp_prep_target.argument.flag1.type               = preflagger
ndppp_prep_target.argument.flag1.baseline           = {{ flag_baselines }}
ndppp_prep_target.argument.filter.type              = filter
ndppp_prep_target.argument.filter.baseline          = CS*, RS*&&
ndppp_prep_target.argument.filter.remove            = true                     # fully kick out the international stations.
ndppp_prep_target.argument.flagamp.type             = preflagger
ndppp_prep_target.argument.flagamp.amplmin          = 1e-30
ndppp_prep_target.argument.applyclock.type          = applycal
ndppp_prep_target.argument.applyclock.parmdb        = parmdb_file
ndppp_prep_target.argument.applyclock.correction    = clock
ndppp_prep_target.argument.applygain.type           = applycal
ndppp_prep_target.argument.applygain.parmdb         = parmdb_file
ndppp_prep_target.argument.applygain.correction     = gain
ndppp_prep_target.argument.applygain.updateweights  = True #added
ndppp_prep_target.argument.applybeam.type           = applybeam
ndppp_prep_target.argument.applybeam.usechannelfreq = True
ndppp_prep_target.argument.applybeam.updateweights  = True #added
ndppp_prep_target.argument.applyrotate.type         = applycal
ndppp_prep_target.argument.applyrotate.parmdb       = parmdb_file
ndppp_prep_target.argument.applyrotate.correction   = commonrotationangle
ndppp_prep_target.argument.flag2.type               = aoflagger
ndppp_prep_target.argument.flag2.keepstatistics     = false
ndppp_prep_target.argument.flag2.memoryperc         = 10
ndppp_prep_target.argument.flag2.strategy           = {{ flagging_strategy }}
ndppp_prep_target.argument.avg.type                 = average
ndppp_prep_target.argument.avg.timestep             = {{ avg_timestep }}       # average to 8 second intervals , PLEASE ADJUST!
ndppp_prep_target.argument.avg.freqstep             = {{ avg_freqstep }}       # average to 2 ch/SB , PLEASE ADJUST!

# create a mapfile with the A-Team skymodel, length = 1
create_ateam_model_map.control.kind              =  plugin
create_ateam_model_map.control.type              =  addListMapfile
create_ateam_model_map.control.hosts             =  ['localhost']
create_ateam_model_map.control.files             =  [ {{ ATeam_skymodel }} ]
create_ateam_model_map.control.mapfile_dir       =  input.output.mapfile_dir
create_ateam_model_map.control.filename          =  ateam_model_name.mapfile

# make sourcedbs from the A-Team skymodel, length = 1
# outtype = blob, because NDPPP likes that 
make_sourcedb_ateam.control.kind                 =  recipe
make_sourcedb_ateam.control.type                 =  executable_args
make_sourcedb_ateam.control.executable           =  {{ makesourcedb }}
make_sourcedb_ateam.control.error_tolerance      =  {{ error_tolerance }}
make_sourcedb_ateam.control.args_format          =  lofar
make_sourcedb_ateam.control.outputkey            =  out
make_sourcedb_ateam.control.mapfile_in           =  create_ateam_model_map.output.mapfile
make_sourcedb_ateam.control.inputkey             =  in
make_sourcedb_ateam.argument.format              =  <
make_sourcedb_ateam.argument.outtype             =  blob

# expand the sourcedb mapfile so that there is one entry for every file, length = nfiles
expand_sourcedb_ateam.control.kind               =  plugin
expand_sourcedb_ateam.control.type               =  expandMapfile
expand_sourcedb_ateam.control.mapfile_in         =  make_sourcedb_ateam.output.mapfile
expand_sourcedb_ateam.control.mapfile_to_match   =  ndppp_prep_target.output.mapfile
expand_sourcedb_ateam.control.mapfile_dir        =  input.output.mapfile_dir
expand_sourcedb_ateam.control.filename           =  expand_sourcedb_ateam.datamap

# Predict, corrupt, and predict the ateam-resolution model, length = nfiles
predict_ateam.control.type                       =  dppp
predict_ateam.control.mapfiles_in                =  [ndppp_prep_target.output.mapfile, expand_sourcedb_ateam.output.mapfile]
predict_ateam.control.inputkeys                  =  [msin,sourcedb]
predict_ateam.control.inplace                    =  True
predict_ateam.control.max_per_node               =  {{ num_proc_per_node_limit }}
predict_ateam.argument.numthreads                =  {{ max_dppp_threads }}
predict_ateam.control.error_tolerance            =  {{ error_tolerance }}
predict_ateam.argument.msin.datacolumn           =  DATA
predict_ateam.argument.msout                     =  .
predict_ateam.argument.msout.datacolumn          =  MODEL_DATA
predict_ateam.argument.steps                     =  [predict]
predict_ateam.argument.predict.type              =  predict
predict_ateam.argument.predict.operation         =  replace
predict_ateam.argument.predict.sourcedb          =  sourcedb
predict_ateam.argument.predict.sources           =  [VirA_4_patch,CygAGG,CasA_4_patch,TauAGG]
predict_ateam.argument.predict.usebeammodel      =  True
# This is run on single subbands, which means that it is ineed "more correct" 
# to set usechannelfreq to false
predict_ateam.argument.predict.usechannelfreq  =  false

# run the a-team clipper to flag data affected by the a-team
ateamcliptar.control.kind               =  recipe
ateamcliptar.control.type               =  executable_args
ateamcliptar.control.max_per_node       =  {{ num_proc_per_node }}   
ateamcliptar.control.mapfile_in         =  ndppp_prep_target.output.mapfile
ateamcliptar.control.executable         =  {{ ATeam_Clipper }}
ateamcliptar.control.error_tolerance    =  {{ error_tolerance }}
ateamcliptar.control.arguments          =  [allms]
ateamcliptar.control.inputkey           =  allms


# create the results directory if needed
mk_results_dir.control.kind               =  plugin
mk_results_dir.control.type               =  makeDirectory
mk_results_dir.control.directory          =  {{ results_directory }}

# make mapfile with the filenames of the results that we want
make_results_mapfile.control.kind            =  plugin
make_results_mapfile.control.type            =  makeResultsMapfile
make_results_mapfile.control.mapfile_dir     =  input.output.mapfile_dir
make_results_mapfile.control.filename        =  make_results_mapfile.mapfile
make_results_mapfile.control.mapfile_in      =  ndppp_prep_target.output.mapfile
make_results_mapfile.control.target_dir      =  {{ results_directory }}
make_results_mapfile.control.make_target_dir =  True
make_results_mapfile.control.new_suffix      =  .pre-cal.ms

# move the results to where we want them
move_results.control.kind               =  recipe
move_results.control.type               =  executable_args
move_results.control.executable         =  /bin/mv
move_results.control.max_per_node       =  {{ num_proc_per_node_limit }}
move_results.control.mapfiles_in        =  [ndppp_prep_target.output.mapfile,make_results_mapfile.output.mapfile]
move_results.control.inputkeys          =  [source,destination]
move_results.control.arguments          =  [source,destination]
