# Pre-Facet Calibrator Calibration Pipeline
#
# Calibrator part of the basic Pre-Facet calibration pipeline:
# - the new "error_tolerance" option requires LOFAR software version >= 2.15
#   (Comment out all lines with "error_tolerance" if you want to use an older version.)
# - using LoSoTo from the pipeline requires latest executable_args node-script
#   (available in the current LOFAR trunk, revision 33969 and later)
#   (The diff, to do the patching by hand, can be found in the 6th comment at:
#   https://github.com/lofar-astron/prefactor/issues/4  )
# - expects shared filesystem, that all nodes can reach all files!
#   (E.g. a single workstation or compute cluster with shared filesystem
#   doesn't work on multiple nodes on CEP-2 or CEP3.)

### parameters you will need to adjust.
# averaging for the calibrator data
! avg_timestep         = 2   # averaging step needed to average the data to 4 seconds time resolution
! avg_freqstep         = 2   # averaging step needed to average the data to 4 ch/SB frequency resolution
# where to find the calibrator data
! cal_input_path       = TRUE_HOME/cal_data_in/ 
! cal_input_pattern    = L*MS
# Path to the skymodels for the Calibrator
! calibrator_path_skymodel  = /usr/share/prefactor/skymodels/
# where to put the inspection plots generated by the pipeline
! inspection_directory = TRUE_HOME/cal_inspection/ 
# where to put the files with the calibration values that are to be transferred to the target
! cal_values_directory = TRUE_HOME/cal_values/ 

# NDPPP-compatible pattern for baselines or stations to be flagged
! flag_baselines         = [ CS013HBA*  ]
# name of the station that will be used as a reference for the phase-plots
! reference_station      = CS001HBA0

# pathes to the scripts etc.
# #### ToDo: get the scripts onto CEP3 and adjust the pathes here!
! calib_cal_parset          = /usr/share//prefactor/parsets/calibcal.parset
! find_skymodel_cal_auto    = /usr/lib/prefactor/scripts/find_skymodel_cal.py
! losoto_importer           = /usr/lib/prefactor/scripts/losotoImporter.py
! fitclock_script           = /usr/lib/prefactor/scripts/fit_clocktec_initialguess_losoto.py
! fitamps_script            = /usr/lib/prefactor/scripts/amplitudes_losoto_3.py
! plotsols_script           = /usr/lib/prefactor/scripts/examine_npys.py
! fit_XYoffset_script       = /usr/lib/prefactor/scripts/find_cal_global_phaseoffset_losoto.py
! plotphases_script         = /usr/lib/prefactor/scripts/plot_solutions_all_stations.py
! losoto_executable         = /usr/bin/losoto

# number of processes to use per step per node
! num_proc_per_node        = 4
# number of processes to use per step per node for tasks with high i/o (dppp or cp) or memory (eg calibration)
! num_proc_per_node_limit  = 2
# number of threads per process for NDPPP
! max_dppp_threads         = 2

# set this to True if you want the pipeline run to continue if single bands fail
! error_tolerance           =  False

### Stuff that you probably don't need to modify
# which steps to run 
pipeline.steps=[createmap_cal, ndppp_prep_cal, combine_data_cal_map, sky_cal, sky_cal_path, calib_cal] 

# generate a mapfile of all the calibrator data
createmap_cal.control.kind            =   plugin
createmap_cal.control.type            =   createMapfile
createmap_cal.control.method          =   mapfile_from_folder
createmap_cal.control.mapfile_dir     =   input.output.mapfile_dir
createmap_cal.control.filename        =   createmap_cal.mapfile
createmap_cal.control.folder          =   {{ cal_input_path }}
createmap_cal.control.pattern         =   {{ cal_input_pattern }}

# run NDPPP on the calibrator data
ndppp_prep_cal.control.type                    = dppp
ndppp_prep_cal.control.max_per_node            = {{ num_proc_per_node_limit }}
ndppp_prep_cal.control.error_tolerance         = {{ error_tolerance }}
ndppp_prep_cal.argument.numthreads             = {{ max_dppp_threads }}
ndppp_prep_cal.argument.msin                   = createmap_cal.output.mapfile    # The input data.
ndppp_prep_cal.argument.msin.datacolumn        = DATA
ndppp_prep_cal.argument.msin.baseline          = CS*&; RS*&; CS*&RS*
ndppp_prep_cal.argument.msout.datacolumn       = DATA
ndppp_prep_cal.argument.msout.writefullresflag = False
ndppp_prep_cal.argument.msout.overwrite        = True ############
ndppp_prep_cal.argument.steps                  = [flag,filter,avg,flagamp]
ndppp_prep_cal.argument.flag.type              = preflagger
ndppp_prep_cal.argument.flag.baseline          = {{ flag_baselines }}
ndppp_prep_cal.argument.filter.type            = filter
ndppp_prep_cal.argument.filter.baseline        = CS*, RS*&&
ndppp_prep_cal.argument.filter.remove          = true                     # fully kick out the international stations.
ndppp_prep_cal.argument.avg.type               = average
ndppp_prep_cal.argument.avg.timestep           = {{ avg_timestep }}       # average to 4 second intervals , PLEASE ADJUST!
ndppp_prep_cal.argument.avg.freqstep           = {{ avg_freqstep }}       # average to 2 ch/SB , PLEASE ADJUST!
ndppp_prep_cal.argument.flagamp.type           = preflagger
ndppp_prep_cal.argument.flagamp.amplmin        = 1e-30

# combine all entries into one mapfile (just for the find_skymodel_cal_auto script)
combine_data_cal_map.control.kind            =   plugin
combine_data_cal_map.control.type            =   createMapfile
combine_data_cal_map.control.method          =   mapfile_all_to_one
combine_data_cal_map.control.mapfile_dir     =   input.output.mapfile_dir
combine_data_cal_map.control.filename        =   combine_data_cal_map.mapfile
combine_data_cal_map.control.mapfile_in      =   createmap_cal.output.mapfile

# find automatically the calibrator used and update the BBS calibration parset
sky_cal.control.type               = pythonplugin  
sky_cal.control.executable         = {{ find_skymodel_cal_auto }}
sky_cal.control.error_tolerance    = {{ error_tolerance }}
sky_cal.argument.flags             = [combine_data_cal_map.output.mapfile]
sky_cal.argument.DirSkymodelCal    = {{ calibrator_path_skymodel }}

## extract from the mapfile from sky_cal, the path to the skymodel (used by calib_cal)
sky_cal_path.control.kind              =  plugin
sky_cal_path.control.type              =  mapfilenamesFromMapfiles
sky_cal_path.control.mapfile_FilePath  =  sky_cal.output.SkymodelCal.mapfile

# now run BBS on the NDPPP-ed calibrator data.
calib_cal.control.type             =  python-calibrate-stand-alone
calib_cal.control.max_per_node     =  {{ num_proc_per_node }}
calib_cal.control.error_tolerance  =  {{ error_tolerance }}
calib_cal.argument.force           =  True
calib_cal.argument.observation     =  ndppp_prep_cal.output.mapfile  # mapfile for the NDPPP-ed calibrator data
calib_cal.argument.parset          =  {{ calib_cal_parset }}
calib_cal.argument.catalog         =  sky_cal_path.output.FilePath
