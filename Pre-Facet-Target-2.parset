# Pre-Facet Target Calibration Pipeline
#
# Target part of the basic Pre-Facet calibration pipeline:
# - no demixing but A-team flagging,
# - calibration transfer and averaging of target data in one go.
# - checks frequncies in MSs to group files
# - the new "error_tolerance" option requires LOFAR software version >= 2.15
#   (Comment out all lines with "error_tolerance" if you want to use an older version.)
# - using LoSoTo from the pipeline requires latest executable_args node-script
#   (available in the current LOFAR trunk, revision 33969 and later)
#   (The diff, to do the patching by hand, can be found in the 6th comment at:
#   https://github.com/lofar-astron/prefactor/issues/4  )
# - expects shared filesystem, that all nodes can reach all files!
#   (E.g. a single workstation or compute cluster with shared filesystem
#   doesn't work on multiple nodes on CEP-2 or CEP3.)

### parameters you will need to adjust.
# parameters you will need to adjust.
# averaging for the target data
! avg_timestep         = 4   # averaging step needed to average the data to 4 seconds time resolution
! avg_freqstep         = 8   # averaging step needed to average the data to 4 ch/SB frequency resolution
# where to find the target data
! target_input_path    = TRUE_HOME/target_data_out/
! cal_input_pattern    = *.MS 
! target_input_pattern = *.ms
# path to the skymodel for the phase-only calibration of the target
! target_skymodel      = TRUE_HOME/Target.skymodel
# download the phase-only calibration skymodel from TGSS
# "Force" : always download , "True" download if {{ target_skymodel }} does not exist , "False" : never download
! use_tgss_target      = True 
# how many subbands to concatenate into on frequency band (usually 10 or 12)
! num_SBs_per_group    = 10
# where to put the inspection plots generated by the pipeline
! inspection_directory = TRUE_HOME/target_inspection/
# where the files with the calibration values from the calibrator pipeline are
! cal_values_directory = TRUE_HOME/cal_values/
# where to put the resulting measurement sets generated by the pipeline
! results_directory    = TRUE_HOME/target_data_out/

# NDPPP-compatible pattern for baselines or stations to be flagged
! flag_baselines         = [ CS013HBA*  ] 
# minimum fraction of unflagged data after RFI flagging and A-team clipping
! min_unflagged_fraction = 0.5
# name of the station that will be used as a reference for the phase-plots
! reference_station      = CS001HBA0
# station-subband number to use as reference for grouping
# "None" -> use lowest frequency input data as reference
# (Please be aware of the difference between SBXXX number and station subband!)
! reference_stationSB    = None

### Values needed for RMextract
# the URL of the server where  the IONEX files can be downloaded
# leave it at "None" to disable downloads, or set it to:
#   ftp://ftp.unibe.ch/aiub/CODE/
# to download from the "standard" server
! ionex_server  = ftp://ftp.unibe.ch/aiub/CODE/
# the prefix of the IONEX files
! ionex_prefix  = CODG
# path where the IONEX files can be stored or are already stored
! ionex_path    = TRUE_HOME/ionex/

# pathes to the scripts etc.
# #### ToDo: get the scripts onto CEP3 and adjust the pathes here!
! ATeam_skymodel           = /usr/share/prefactor/skymodels/Ateam_LBA_CC.skymodel
! losoto_importer          = /usr/lib/prefactor/scripts/losotoImporter.py
! get_ion_script           = /usr/bin/download_IONEX.py
! transfer_script          = /usr/lib/prefactor/scripts/transfer_gains_RMextract.py
! ATeam_Clipper            = /usr/lib/prefactor/scripts/Ateamclipper.py
! get_tgss_skymodel_script = /usr/lib/prefactor/scripts/download_tgss_skymodel_target.py
! sortmap_script           = /usr/lib/prefactor/scripts/sort_times_into_freqGroups.py
! check_flagged_script     = /usr/lib/prefactor/scripts/check_unflagged_fraction.py
! structurefunction_script = /usr/lib/prefactor/scripts/getStructure_from_phases.py
! plotphases_script        = /usr/lib/prefactor/scripts/plot_solutions_all_stations.py
! losoto_executable        = /usr/bin/losoto
! makesourcedb             = /usr/bin/makesourcedb 
! flagging_strategy        = /usr/share/rfistrategies/HBAdefault

# number of processes to use per step per node
! num_proc_per_node        = 8 
# number of processes to use per step per node for tasks with high i/o (dppp or cp) or memory (eg calibration)
! num_proc_per_node_limit  = 4
# number of threads per process for NDPPP
! max_dppp_threads         = 2 

# set this to True if you want the pipeline run to continue if single bands fail
! error_tolerance           =  False
### Stuff that you probably don't need to modify
# which steps to run 
pipeline.steps=[mk_inspect_dir, createmap_target, combine_target_map, sortmap_target, do_sortmap_maps, dpppconcat, check_unflagged, check_unflagged_map, sky_tar, create_target_model_map, make_sourcedb_target, expand_sourcedb_target, gsmcal_parmmap, gsmcal_solve, gsmcal_apply, h5_imp_gsmsol_map, mk_results_dir, make_results_mapfile, move_results] #h5imp_gsmsol, plot_gsm_phases, gsmcal_antmap, make_structurefunction, old_plot_gsmphases, createmap_plots, copy_plots, mk_results_dir, make_results_mapfile, move_results]

# create the inspection_directory if needed
mk_inspect_dir.control.kind               =  plugin
mk_inspect_dir.control.type               =  makeDirectory
mk_inspect_dir.control.directory          =  {{ inspection_directory }}


#
createmap_target.control.kind            =   plugin
createmap_target.control.type            =   createMapfile
createmap_target.control.method          =   mapfile_from_folder
createmap_target.control.mapfile_dir     =   input.output.mapfile_dir
createmap_target.control.filename        =   createmap_target.mapfile
createmap_target.control.folder          =   {{ target_input_path }}
createmap_target.control.pattern         =   {{ target_input_pattern }}


# combine all entries into one mapfile, for the sortmap script
combine_target_map.control.kind            =   plugin
combine_target_map.control.type            =   createMapfile
combine_target_map.control.method          =   mapfile_all_to_one
combine_target_map.control.mapfile_dir     =   input.output.mapfile_dir
combine_target_map.control.filename        =   combine_tar_map.mapfile
combine_target_map.control.mapfile_in      =   createmap_target.output.mapfile

# sort the target data by frequency into groups so that NDPPP can concatenate them
sortmap_target.control.type               =  pythonplugin  
sortmap_target.control.executable         =  {{ sortmap_script }}
sortmap_target.argument.flags             =  [combine_target_map.output.mapfile]
sortmap_target.argument.filename          =  sortmap_target
sortmap_target.argument.mapfile_dir       =  input.output.mapfile_dir
sortmap_target.argument.target_path       =  input.output.working_directory/input.output.job_name
sortmap_target.argument.numSB             =  {{ num_SBs_per_group }}
sortmap_target.argument.NDPPPfill         =  True
sortmap_target.argument.stepname          =  dpppconcat
sortmap_target.argument.firstSB           =  {{ reference_stationSB }}
sortmap_target.argument.truncateLastSBs   =  False     # This means that a excess subbands that don't make a full group get discarded

# convert the output of sortmap_target into usable mapfiles
do_sortmap_maps.control.kind                      =  plugin
do_sortmap_maps.control.type                      =  mapfilenamesFromMapfiles
do_sortmap_maps.control.mapfile_groupmap          =  sortmap_target.output.groupmapfile.mapfile
do_sortmap_maps.control.mapfile_datamap           =  sortmap_target.output.mapfile.mapfile

# run NDPPP to concatenate the target
dpppconcat.control.type                   =  dppp
dpppconcat.control.max_per_node           =  {{ num_proc_per_node_limit }}
dpppconcat.control.error_tolerance        =  {{ error_tolerance }}
dpppconcat.control.mapfile_out            =  do_sortmap_maps.output.groupmap # tell the pipeline to give the output useful names
dpppconcat.control.mapfiles_in            =  [do_sortmap_maps.output.datamap]
dpppconcat.control.inputkey               =  msin
dpppconcat.argument.msin.datacolumn       =  DATA
dpppconcat.argument.msin.missingdata      =  True    #\ these two lines will make NDPPP generate dummy data when
dpppconcat.argument.msin.orderms          =  False   #/ concatenating data
dpppconcat.argument.msout.datacolumn      =  DATA
dpppconcat.argumentmsout.writefullresflag =  False
dpppconcat.argument.msout.overwrite       = True
dpppconcat.argument.steps                 =  [count,flag]      # run the aoflagger (this used to be an extra step)
dpppconcat.argument.flag.type             =  aoflagger
dpppconcat.argument.flag.keepstatistics   =  false
dpppconcat.argument.flag.memoryperc       =  10
dpppconcat.argument.flag.strategy         =  {{ flagging_strategy }}

# check all files for minimum unflagged fraction
check_unflagged.control.type            =  pythonplugin
check_unflagged.control.executable      =  {{ check_flagged_script }}
check_unflagged.argument.flags          =  [dpppconcat.output.mapfile]
check_unflagged.argument.min_fraction   =  {{ min_unflagged_fraction }}
# this step writes hostnames into "check_unflagged.flagged.mapfile" due to a "feature" of the pythonplugin

# prune flagged files from mapfile
check_unflagged_map.control.kind               =  plugin
check_unflagged_map.control.type               =  pruneMapfile
check_unflagged_map.control.mapfile_in         =  check_unflagged.output.flagged.mapfile
check_unflagged_map.control.mapfile_dir        =  input.output.mapfile_dir
check_unflagged_map.control.filename           =  check_unflagged_map.mapfile
check_unflagged_map.control.prune_str          =  None

# if wished, download the tgss skymodel for the target
sky_tar.control.type               =  pythonplugin  
sky_tar.control.executable         =  {{ get_tgss_skymodel_script }}
sky_tar.argument.flags             =  [combine_target_map.output.mapfile]
sky_tar.argument.DoDownload        =  {{ use_tgss_target }}
sky_tar.argument.SkymodelPath      =  {{ target_skymodel }}
sky_tar.argument.Radius            =  5. #in degrees

# create a mapfile with the target skymodel, length = 1
create_target_model_map.control.kind              =  plugin
create_target_model_map.control.type              =  addListMapfile
create_target_model_map.control.hosts             =  ['localhost']
create_target_model_map.control.files             =  [ {{ target_skymodel }} ]
create_target_model_map.control.mapfile_dir       =  input.output.mapfile_dir
create_target_model_map.control.filename          =  target_model_name.mapfile

# make sourcedbs from the target skymodel, length = 1
# outtype = blob, because NDPPP likes that 
make_sourcedb_target.control.kind                 =  recipe
make_sourcedb_target.control.type                 =  executable_args
make_sourcedb_target.control.executable           =  {{ makesourcedb }}
make_sourcedb_target.control.error_tolerance      =  {{ error_tolerance }}
make_sourcedb_target.control.args_format          =  lofar
make_sourcedb_target.control.outputkey            =  out
make_sourcedb_target.control.mapfile_in           =  create_target_model_map.output.mapfile
make_sourcedb_target.control.inputkey             =  in
make_sourcedb_target.argument.format              =  <
make_sourcedb_target.argument.outtype             =  blob

# expand the sourcedb mapfile so that there is one entry for every file, length = nfiles
expand_sourcedb_target.control.kind               =  plugin
expand_sourcedb_target.control.type               =  expandMapfile
expand_sourcedb_target.control.mapfile_in         =  make_sourcedb_target.output.mapfile
expand_sourcedb_target.control.mapfile_to_match   =  check_unflagged_map.output.mapfile
expand_sourcedb_target.control.mapfile_dir        =  input.output.mapfile_dir
expand_sourcedb_target.control.filename           =  expand_sourcedb_target.datamap

# generate mapfile with the parmDB names to be used in the gsmcal steps
gsmcal_parmmap.control.kind               =  plugin
gsmcal_parmmap.control.type               =  createMapfile
gsmcal_parmmap.control.method             =  add_suffix_to_file
gsmcal_parmmap.control.mapfile_in         =  check_unflagged_map.output.mapfile
gsmcal_parmmap.control.add_suffix_to_file =  /instrument_directionindependent
gsmcal_parmmap.control.mapfile_dir        =  input.output.mapfile_dir
gsmcal_parmmap.control.filename           =  gsmcal_parmdbs.mapfile

# solve for phase-only calibration solutions
# solve and apply are seperate to allow to solve on a subset of baselines but apply to all
gsmcal_solve.control.type                             = dppp
gsmcal_solve.control.environment                      = {OMP_NUM_THREADS: 4}
gsmcal_solve.control.error_tolerance                  = {{ error_tolerance }}
gsmcal_solve.control.inplace                          = True
gsmcal_solve.control.max_per_node                     = {{ num_proc_per_node_limit }}
gsmcal_solve.argument.numthreads                      = {{ max_dppp_threads }}
gsmcal_solve.argument.msin                            = check_unflagged_map.output.mapfile
gsmcal_solve.argument.msin.datacolumn                 = DATA
gsmcal_solve.argument.msin.baseline                   = CS*&; RS*&; CS*&RS*
gsmcal_solve.argument.msout.datacolumn                = CORRECTED_DATA
gsmcal_solve.argument.steps                           = [filter,gaincal]
gsmcal_solve.filter.type                              = filter
gsmcal_solve.filter.blrange                           = [150, 999999]
gsmcal_solve.argument.gaincal.type                    = gaincal
gsmcal_solve.argument.gaincal.maxiter                 = 500
gsmcal_solve.argument.gaincal.caltype                 = phaseonly
gsmcal_solve.argument.gaincal.nchan                   = 0
gsmcal_solve.argument.gaincal.solint                  = 1
gsmcal_solve.argument.gaincal.sourcedb                = expand_sourcedb_target.output.mapfile
gsmcal_solve.argument.gaincal.parmdb                  = gsmcal_parmmap.output.mapfile
gsmcal_solve.argument.gaincal.usebeammodel            = True
gsmcal_solve.argument.gaincal.usechannelfreq          = True
gsmcal_solve.argument.gaincal.beammode                = array_factor

# apply the phase-only calibration solutions
# solve and apply are seperate to allow to solve on a subset of baselines but apply to all
gsmcal_apply.control.type                             = dppp
gsmcal_apply.control.error_tolerance                  = {{ error_tolerance }}
gsmcal_apply.control.inplace                          = True
gsmcal_apply.control.max_per_node                     = {{ num_proc_per_node_limit }}
gsmcal_apply.argument.numthreads                      = {{ max_dppp_threads }}
gsmcal_apply.argument.msin                            = check_unflagged_map.output.mapfile
gsmcal_apply.argument.msin.datacolumn                 = DATA
gsmcal_apply.argument.msout.datacolumn                = CORRECTED_DATA
gsmcal_apply.argument.msout.writefullresflag          = False
gsmcal_apply.argument.steps                           = [applycal]
gsmcal_apply.argument.applycal.type                   = applycal
gsmcal_apply.argument.applycal.correction             = gain
gsmcal_apply.argument.applycal.parmdb                 = gsmcal_parmmap.output.mapfile

# generate a mapfile with all files in a single entry
h5_imp_gsmsol_map.control.kind               =  plugin
h5_imp_gsmsol_map.control.type               =  MapfileToOne
h5_imp_gsmsol_map.control.method             =  mapfile_all_to_one
h5_imp_gsmsol_map.control.mapfile_in         =  check_unflagged_map.output.mapfile
h5_imp_gsmsol_map.control.mapfile_dir        =  input.output.mapfile_dir
h5_imp_gsmsol_map.control.filename           =  h5_imp_gsmsol_map.mapfile

# import all instrument tables into one LoSoTo file
h5imp_gsmsol.control.type            =  pythonplugin
h5imp_gsmsol.control.executable      =  {{ losoto_importer }}
h5imp_gsmsol.control.error_tolerance =  {{ error_tolerance }}
h5imp_gsmsol.argument.flags          =  [h5_imp_gsmsol_map.output.mapfile,h5imp_gsmsol_losoto.h5]
h5imp_gsmsol.argument.instrument     =  /instrument_directionindependent
h5imp_gsmsol.argument.solsetName     =  sol000
h5imp_gsmsol.argument.compression    =  7

# plot the phase solutions from the phase-only calibration of the target
plot_gsm_phases.control.kind                          =  recipe
plot_gsm_phases.control.type                          =  executable_args
plot_gsm_phases.control.executable                    =  {{ losoto_executable }}
plot_gsm_phases.control.max_per_node                  =  {{ num_proc_per_node }}
plot_gsm_phases.control.parsetasfile                  =  True
plot_gsm_phases.control.args_format                   =  losoto
plot_gsm_phases.control.mapfiles_in                   =  [h5imp_gsmsol.output.h5parm.mapfile]
plot_gsm_phases.control.inputkeys                     =  [hdf5file]
plot_gsm_phases.argument.flags                        =  [hdf5file]
plot_gsm_phases.argument.LoSoTo.Steps                 =  [plot]
plot_gsm_phases.argument.LoSoTo.Solset                =  [sol000]
plot_gsm_phases.argument.LoSoTo.Soltab                =  [sol000/phase000]
plot_gsm_phases.argument.LoSoTo.SolType               =  [phase]
plot_gsm_phases.argument.LoSoTo.ant                   =  []
plot_gsm_phases.argument.LoSoTo.pol                   =  [XX,YY]
plot_gsm_phases.argument.LoSoTo.dir                   =  [pointing]
plot_gsm_phases.argument.LoSoTo.Steps.plot.Operation  =  PLOT
plot_gsm_phases.argument.LoSoTo.Steps.plot.PlotType   =  2D
plot_gsm_phases.argument.LoSoTo.Steps.plot.Axes       =  [time,freq]
plot_gsm_phases.argument.LoSoTo.Steps.plot.TableAxis  =  [ant]
plot_gsm_phases.argument.LoSoTo.Steps.plot.ColorAxis  =  [pol]
plot_gsm_phases.argument.LoSoTo.Steps.plot.Reference  =  {{ reference_station }}
plot_gsm_phases.argument.LoSoTo.Steps.plot.PlotFlag   =  False
plot_gsm_phases.argument.LoSoTo.Steps.plot.Prefix     =  {{ inspection_directory }}/gsm_phases_

# generate mapfile with the antenna tables of the concatenated target datafiles
gsmcal_antmap.control.kind               =  plugin
gsmcal_antmap.control.type               =  createMapfile
gsmcal_antmap.control.method             =  add_suffix_to_file
gsmcal_antmap.control.mapfile_in         =  dpppconcat.output.mapfile
gsmcal_antmap.control.add_suffix_to_file =  /ANTENNA
gsmcal_antmap.control.mapfile_dir        =  input.output.mapfile_dir
gsmcal_antmap.control.filename           =  gsmcal_antmaps.mapfile

# plot the phase solutions from the phase-only calibration of the target
make_structurefunction.control.kind               =  recipe
make_structurefunction.control.type               =  executable_args
make_structurefunction.control.executable         =  {{ structurefunction_script }}
make_structurefunction.control.max_per_node       =  {{ num_proc_per_node }}
make_structurefunction.control.mapfiles_in        =  [gsmcal_parmmap.output.mapfile,gsmcal_antmap.output.mapfile,check_unflagged_map.output.mapfile]
make_structurefunction.control.inputkeys          =  [inparmdb,inants,outbase]
make_structurefunction.control.arguments          =  [inparmdb,inants,outbase]

# plot the phase solutions from the phase-only calibration of the target
old_plot_gsmphases.control.kind               =  recipe
old_plot_gsmphases.control.type               =  executable_args
old_plot_gsmphases.control.executable         =  {{ plotphases_script }}
old_plot_gsmphases.control.max_per_node       =  {{ num_proc_per_node }}
old_plot_gsmphases.control.mapfiles_in        =  [gsmcal_parmmap.output.mapfile,check_unflagged_map.output.mapfile]
old_plot_gsmphases.control.inputkeys          =  [infile,outbase]
old_plot_gsmphases.control.arguments          =  [-p,infile,outbase]

# generate a mapfile of all the diagnostic plots
createmap_plots.control.kind            =   plugin
createmap_plots.control.type            =   createMapfile
createmap_plots.control.method          =   mapfile_from_folder
createmap_plots.control.mapfile_dir     =   input.output.mapfile_dir
createmap_plots.control.filename        =   diagnostic_plots.mapfile
createmap_plots.control.folder          =   input.output.working_directory/input.output.job_name
createmap_plots.control.pattern         =   *.png

# copy the diagnostic plots to the results_directory
copy_plots.control.kind               =  recipe
copy_plots.control.type               =  executable_args
copy_plots.control.executable         =  /bin/cp
copy_plots.control.max_per_node       =  {{ num_proc_per_node_limit }}
copy_plots.control.mapfile_in         =  createmap_plots.output.mapfile
copy_plots.control.inputkey           =  source
copy_plots.control.arguments          =  [source,{{ inspection_directory }}]

# create the results directory if needed
mk_results_dir.control.kind               =  plugin
mk_results_dir.control.type               =  makeDirectory
mk_results_dir.control.directory          =  {{ results_directory }}

# make mapfile with the filenames of the results that we want
make_results_mapfile.control.kind            =  plugin
make_results_mapfile.control.type            =  makeResultsMapfile
make_results_mapfile.control.mapfile_dir     =  input.output.mapfile_dir
make_results_mapfile.control.filename        =  make_results_mapfile.mapfile
make_results_mapfile.control.mapfile_in      =  check_unflagged_map.output.mapfile
make_results_mapfile.control.target_dir      =  {{ results_directory }}
make_results_mapfile.control.make_target_dir =  True
make_results_mapfile.control.new_suffix      =  .pre-cal.ms

# move the results to where we want them
move_results.control.kind               =  recipe
move_results.control.type               =  executable_args
move_results.control.executable         =  /bin/mv
move_results.control.max_per_node       =  {{ num_proc_per_node_limit }}
move_results.control.mapfiles_in        =  [check_unflagged_map.output.mapfile,make_results_mapfile.output.mapfile]
move_results.control.inputkeys          =  [source,destination]
move_results.control.arguments          =  [source,destination]
